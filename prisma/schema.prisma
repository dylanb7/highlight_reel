generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  relationMode         = "prisma"
}

model HighlightPool {
  id         String      @id @default(cuid())
  name       String?
  ownerId    String
  owner      User        @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  mods       User[]      @relation("Mods")
  pending    User[]      @relation("PoolRequests")
  public     Boolean     @default(false)
  createdAt  DateTime    @default(now())
  highlights Highlight[]
  followers  User[]      @relation("FollowedPools")
}

model Highlight {
  id                     String         @id @default(cuid())
  s3bucket               String?        @db.VarChar(255)
  s3region               String?        @db.VarChar(255)
  raspberryPiId          String?        @db.VarChar(255)
  wristbandId            String?        @db.VarChar(255)
  thumbnail              String?
  timestampUTC           BigInt?
  duration               Float?         @db.Float
  aspectRatioNumerator   Int?           @db.SmallInt
  aspectRatioDenominator Int?           @db.SmallInt
  poolId                 String?
  pool                   HighlightPool? @relation(fields: [poolId], references: [id], onDelete: Cascade)
  upvotes                User[]         @relation("Upvotes")
  addedBy                User[]         @relation("AddedHighlights")

  @@index([timestampUTC])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  username      String?
  public        Boolean?
  following     User[]          @relation("ProfileFollows")
  followedBy    User[]          @relation("ProfileFollows")
  pending       User[]          @relation("PendingFollows")
  sentFollows   User[]          @relation("PendingFollows")
  pools         HighlightPool[] @relation("FollowedPools")
  poolRequests  HighlightPool[] @relation("PoolRequests")
  modPools      HighlightPool[] @relation("Mods")
  highlights    Highlight[]     @relation("AddedHighlights")
  upvotes       Highlight[]     @relation("Upvotes")
  ownedPools    HighlightPool[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
