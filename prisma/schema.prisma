generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HighlightPool {
  id         String      @id @default(cuid())
  name       String?
  ownerId    String
  owner      Profile     @relation("Owner", fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  mods       Profile[]   @relation("Mods")
  pending    Profile[]   @relation("PoolRequests")
  public     Boolean     @default(false)
  highlights Highlight[]
  followers  Profile[]   @relation("FollowedPools")
}

model Profile {
  id           String          @id @default(cuid())
  username     String
  userId       String          @unique
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  public       Boolean         @default(false)
  following    Profile[]       @relation("ProfileFollows")
  followedBy   Profile[]       @relation("ProfileFollows")
  pending      Profile[]       @relation("PendingFollows")
  sentFollows  Profile[]       @relation("PendingFollows")
  pools        HighlightPool[] @relation("FollowedPools")
  poolRequests HighlightPool[] @relation("PoolRequests")
  modPools     HighlightPool[] @relation("Mods")
  highlights   Highlight[]     @relation("AddedHighlights")
  upvotes      Highlight[]     @relation("Upvotes")
  ownedPools   HighlightPool[] @relation("Owner")
}

model Highlight {
  id        String        @id @default(cuid())
  link      String
  createdAt DateTime      @default(now())
  poolId    String
  pool      HighlightPool @relation(fields: [poolId], references: [id], onDelete: Cascade)
  upvotes   Profile[]     @relation("Upvotes")
  addedBy   Profile[]     @relation("AddedHighlights")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
